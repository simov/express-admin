{
  "name": "mysql-validator",
  "version": "0.1.4",
  "description": "MySql data type validation.",
  "keywords": [
    "mysql",
    "data",
    "validation"
  ],
  "license": "MIT",
  "homepage": "http://github.com/simov/mysql-validator",
  "author": {
    "name": "simo",
    "email": "simeonvelichkov@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/simov/mysql-validator.git"
  },
  "dependencies": {
    "moment": "*",
    "big-integer": "*"
  },
  "devDependencies": {
    "mysql": "2.0.0-alpha2",
    "mocha": "*",
    "should": "*",
    "colors": "*"
  },
  "main": "./lib/validator",
  "readme": "#MySql Validator\n\nValidates web forms input against mysql database.\n\n##Installation\n\n    $ npm install mysql-validator\n\n##API\n\n```js\nvar validator = require('mysql-validator');\n\nvar err = validator.check('doh winning!', 'varchar(45)');\nif (err) {\n  console.log(err.message);\n}\n```\n\nThe first parameter is the posted input data and the second is the mysql data type of the field in your database.\n\n##Obtaining data types\n\nThe best way to pass the corresponding data type for your input field is to query the database for it.\n\n```sql\ndescribe `table-name`;\n```\n\nAll you need to look for is the `Type` column. This is the string that the validator expects to see as a second parameter.\n\nThis will give you an idea of what object is constructed after the data type string have been parsed. This object is used internally by the validator.\n\n    $ mocha test/data-type.js\n\nYou can type in your data types manually without querying the database, just make sure you don't mess them up.\n\n##Express 3.x example\n\nSuppose you have a form like this.\n\n```html\n<form method=\"post\" action=\"/save\">\n    <input type=\"text\" name=\"name\" />\n    <input type=\"text\" name=\"cache\" />\n    <input type=\"text\" name=\"date\" />\n    <input type=\"submit\" value=\"Save\" />\n</form>\n```\n\nThen your router may look like this.\n\n```js\napp.post('/save', function (req, res) {\n  // we'll store all validation errors here\n  var errors = [];\n  // field-type mapping (this may be the result of 'describe table')\n  var types = {\n    name: 'varchar(10)',\n    cache: 'decimal(6,2) unsigned',\n    date: 'datetime'\n  }\n  // loop through the submitted fields and validate them\n  for (var key in req.body) {\n    var err = validator.check(req.body[key], types[key]);\n    // store the error's message and the field name\n    if (err) errors.push({ name: key, error: err.message });\n  }\n  if (errors.length) {\n    // notify the user about the errors\n    res.render('template', { err: errors, other: 'params...' });\n  } else {\n    // safely store the user's input into the database\n  }\n});\n```\n\n##Tests\n\nBefore you can run the tests you must create the test user and give him rights to the test database.\n\n```sql\ncreate user 'liolio'@'localhost' identified by 'karamba';\ngrant all on `mysql-validator`.* to 'liolio'@'localhost';\n```\n\nThen run this test.\n\n    $ mocha test/mysql.js\n\nIf it pass then you're good to go.\n\nThere are a various tests for each data type.\n\n    $ mocha test/index.js\n\nThe output is pretty verbose. The yellow column show what the test input is. The left column show what mysql store in it's database for this input. The right column show whether the validator think it should be valid or not.\n\n![](http://i.imgur.com/rKYxW.jpg)\n",
  "readmeFilename": "README.md",
  "_id": "mysql-validator@0.1.4",
  "_from": "mysql-validator@>=0.1.4"
}
