{
  "name": "big-integer",
  "version": "1.1.5",
  "author": {
    "name": "Peter Olson",
    "email": "peter.e.c.olson+npm@gmail.com"
  },
  "description": "An arbitrary length integer library for Javascript",
  "contributors": [],
  "bin": {},
  "scripts": {},
  "main": "./BigInteger",
  "repository": {
    "type": "git",
    "url": "git@github.com:peterolson/BigInteger.js.git"
  },
  "keywords": [
    "math",
    "big",
    "bignum",
    "bigint",
    "biginteger",
    "integer",
    "arbitrary",
    "precision",
    "arithmetic"
  ],
  "dependencies": {},
  "license": "WTFPL",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "BigInteger.js\n=========\n\n**BigInteger.js** is an arbitrary-length integer library for Javascript, allowing arithmetic operations on integers of unlimited size, notwithstanding memory and time limitations.\n\nIf you are using a browser, you can download [BigInteger.js from GitHub](http://peterolson.github.com/BigInteger.js/BigInteger.min.js) or just hotlink to it:\n\n\t<script src=\"http://peterolson.github.com/BigInteger.js/BigInteger.min.js\"></script>\n\nIf you are using node, you can install BigInteger with [npm](https://npmjs.org/).\n\n    npm install big-integer\n\nThen you can include it in your code:\n\n\tvar bigInt = require(\"big-integer\");\n\n`bigInt(number)`\n---\nYou can create a bigInt by calling the `bigInt` function. You can pass in\n\n - a string, which it will parse as an bigInt and throw an `\"Invalid integer\"` error if the parsing fails.\n - a Javascript number, which it will parse as an bigInt and throw an `\"Invalid integer\"` error if the parsing fails.\n - another bigInt.\n - nothing, and it will return `bigInt.zero`.\n\nExamples:\n\n    var zero = bigInt();\n    var ninetyThree = bigInt(93);\n\tvar largeNumber = bigInt(\"75643564363473453456342378564387956906736546456235345\");\n\tvar googol = bigInt(\"1e100\");\n\tvar bigNumber = bigInt(largeNumber);\n\nNote that Javascript numbers larger than `9007199254740992` and smaller than `-9007199254740992` are not precisely represented numbers and will not produce exact results. If you are dealing with numbers outside that range, it is better to pass in strings.\n\nMethod Chaining\n---\nNote that bigInt operations return bigInts, which allows you to chain methods, for example:\n\n    var salary = bigInt(dollarsPerHour).times(hoursWorked).plus(randomBonuses)\n\nConstants\n---\n\nThere are three constants already stored that you do not have to construct with the `bigInt` function yourself:\n\n - `bigInt.one`, equivalent to `bigInt(1)`\n - `bigInt.zero`, equivalent to `bigInt(0)`\n - `bigInt.minusOne`, equivalent to `bigInt(-1)`\n\nMethods\n===\n\n`abs()`\n---\nReturns the absolute value of a bigInt.\n\n - `bigInt(-45).abs()` => `45`\n - `bigInt(45).abs()` => `45`\n\n`add(number)`\n---\nPerforms addition.\n\n - `bigInt(5).add(7)` => `12`\n\n`compare(number)`\n---\nPerforms a comparison between two numbers. If the numbers are equal, it returns `0`. If the first number is greater, it returns `1`. If the first number is lesser, it returns `-1`.\n\n - `bigInt(5).compare(5)` => `0`\n - `bigInt(5).compare(4)` => `1`\n - `bigInt(4).compare(5)` => `-1`\n\n`compareAbs(number)`\n---\nPerforms a comparison between the absolute value of two numbers.\n\n - `bigInt(5).compareAbs(-5)` => `0`\n - `bigInt(5).compareAbs(4)` => `1`\n - `bigInt(4).compareAbs(-5)` => `-1`\n\n`divide(number)`\n---\nPerforms integer division, disregarding the remainder.\n\n - `bigInt(59).divide(5)` => `11`\n\n`divmod(number)`\n---\nPerforms division and returns an object with two properties: `quotient` and `remainder`. The sign of the remainder will match the sign of the dividend.\n\n - `bigInt(59).divmod(5)` => `{quotient: bigInt(11), remainder: bigInt(4) }`\n - `bigInt(-5).divmod(2)` => `{quotient: bigInt(-2), remainder: bigInt(-1) }`\n\n`equals(number)`\n---\nChecks if two numbers are equal.\n\n - `bigInt(5).equals(5)` => `true`\n - `bigInt(4).equals(7)` => `false`\n\n`greater(number)`\n---\nChecks if the first number is greater than the second.\n\n - `bigInt(5).greater(6)` => `false`\n - `bigInt(5).greater(5)` => `false`\n - `bigInt(5).greater(4)` => `true`\n\n`greaterOrEquals(number)`\n---\nChecks if the first number is greater than or equal to the second.\n\n - `bigInt(5).greaterOrEquals(6)` => `false`\n - `bigInt(5).greaterOrEquals(5)` => `true`\n - `bigInt(5).greaterOrEquals(4)` => `true`\n\n`isEven(number)`\n---\nReturns `true` if the number is even, `false` otherwise.\n\n - `bigInt(6).isEven()` => `true`\n - `bigInt(3).isEven()` => `false`\n\n`isNegative(number)`\n---\nReturns `true` if the number is negative, `false` otherwise.\nReturns `false` for `0` and `true` for `-0`.\n\n - `bigInt(-23).isNegative()` => `true`\n - `bigInt(50).isNegative()` => `false`\n\n`isOdd(number)`\n---\nReturns `true` if the number is odd, `false` otherwise.\n\n - `bigInt(13).isOdd()` => `true`\n - `bigInt(40).isOdd()` => `false`\n\n`isPositive(number)`\n---\nReturn `true` if the number is positive, `false` otherwise.\nReturns `true` for `0` and `false` for `-0`.\n\n - `bigInt(54).isPositive()` => `true`\n - `bigInt(-1).isPositive()` => `false`\n\n`lesser(number)`\n---\nChecks if the first number is lesser than the second.\n\n - `bigInt(5).lesser(6)` => `true`\n - `bigInt(5).lesser(5)` => `false`\n - `bigInt(5).lesser(4)` => `false`\n\n`lesserOrEquals(number)`\n---\nChecks if the first number is less than or equal to the second.\n\n - `bigInt(5).lesserOrEquals(6)` => `true`\n - `bigInt(5).lesserOrEquals(5)` => `true`\n - `bigInt(5).lesserOrEquals(4)` => `false`\n\n`minus(number)`\n---\nAlias for the `subtract` method.\n\n - `bigInt(3).minus(5)` => `-2`\n\n`mod(number)`\n---\nPerforms division and returns the remainder, disregarding the quotient. The sign of the remainder will match the sign of the dividend.\n\n - `bigInt(59).mod(5)` =>  `4`\n - `bigInt(-5).mod(2)` => `-1`\n\n`multiply(number)`\n---\nPerforms multiplication.\n\n - `bigInt(111).multiply(111)` => `12321`\n\n`next()`\n---\nAdds one to the number.\n\n - `bigInt(6).next()` => `7`\n\n`notEquals(number)`\n---\nChecks if two numbers are not equal.\n\n - `bigInt(5).notEquals(5)` => `false`\n - `bigInt(4).notEquals(7)` => `true`\n\n - `bigInt(6).next()` => `7`\n\n`over(number)`\n---\nAlias for the `divide` method.\n\n - `bigInt(59).over(5)` => `11`\n\n`plus(number)`\n---\nAlias for the `add` method.\n\n - `bigInt(5).plus(7)` => `12`\n\n`pow(number)`\n---\nPerforms exponentiation. If the exponent is less than `0`, `pow` returns `0`. `bigInt.zero.pow(0)` returns `1`.\n\n - `bigInt(16).pow(16)` => `18446744073709551616`\n\n`prev(number)`\n---\nSubtracts one from the number.\n\n - `bigInt(6).prev()` => `5`\n\n`subtract(number)`\n---\nPerforms subtraction.\n\n - `bigInt(3).subtract(5)` => `-2`\n\n`times(number)`\n---\nAlias for the `multiply` method.\n\n - `bigInt(111).times(111)` => `12321`\n\n`toJSNumber()`\n---\nConverts a bigInt into a native Javascript number. Loses precision for numbers outside the range `[-9007199254740992, 9007199254740992]`.\n\n - `bigInt(\"18446744073709551616\").toJSNumber()` => `18446744073709552000`\n\nOverride Methods\n===\n\n`toString()`\n---\nConverts a bigInt to a string.\n\n`valueOf()`\n---\nConverts a bigInt to a native Javascript number. This override allows you to use native arithmetic operators without explicit conversion:\n\n    bigInt(\"100\") + bigInt(\"200\") === 300; //true",
  "readmeFilename": "README.md",
  "_id": "big-integer@1.1.5",
  "_from": "big-integer@*"
}
